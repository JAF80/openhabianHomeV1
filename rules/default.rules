//import org.openhab.core.library.types.*
//import org.openhab.model.script.actions.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DateTimeType


var Timer timerBathroomFan = null
var Timer timerStorageroomFan = null
var Timer timerStorageroomLight = null
var Timer timerStairwellLight = null
var Timer timerToiletFan = null
var Timer timerHallwayLight = null
var Timer timerBalconyOfficeLight = null
var Timer timerBalconyMasterbedroomLight = null
var Timer timerBathroomHeater = null

var Number valueHeaterTowel = 0
var Number valueFanBathroom = 0
var Number valueFanToilet = 0
var Number valueLightStairwell = 0
var Number valueLightStorageroom = 0
var Number valueFanStorageroom = 0
var Number valueLightHallway = 0
var Number valueLightBalconyoffice = 0
var Number valueLightBalconymasterbedroom = 0

var DateTime RoofEnabled
var DateTime RoofDisabled
var long TimeEnabled
var float Energy
var float Power = 10

rule SetDay
when
	System started or Time is midnight
then
	Date.postUpdate(new DateTimeType())
end

rule ControlHumidityInBathroom
when
	Time cron "0 0/2 10-20 ? * *"
then
	valueFanBathroom = Bathroom_Fan_Timer.state as Number
	if ((Bathroom_Humidity.state >= 94) && (Bathroom_Fan.state == OFF)) {
		sendCommand(Bathroom_Fan, ON)
		timerBathroomFan = createTimer(now.plusMinutes(valueFanBathroom.intValue)) [|
                	sendCommand(Bathroom_Fan, OFF)
                        timerBathroomFan = null
                ]
		var count = valueFanBathroom
		while(count >= 0) {
			Countdown_Bathroom_Fan.postUpdate(count)
			count = count - 1
			Thread::sleep(60000)
		}
	}
end	

rule controlTemperatureInStorageRoom
when
        Time cron "0 0/2 10-20 ? * *"
then
	valueFanStorageroom = Storageroom_Fan_Timer.state as Number
	if ((StorageRoom_Temperature.state >= 40) && (StorageRoom_Fan.state == OFF)) {
		sendCommand(StorageRoom_Fan, ON)
		timerStorageroomFan = createTimer(now.plusMinutes(valueFanStorageroom.intValue)) [|
			sendCommand(StorageRoom_Fan, OFF)
			timerStorageroomFan = null
		]
		var count = valueFanStorageroom
               	while(count >= 0) {
                       	Countdown_Storageroom_Fan.postUpdate(count)
                       	count = count - 1
                       	Thread::sleep(60000)
	        }
	}
end

rule StopEquipmentAtNight
when
	Time cron "0 0/2 21-00 ? * *"
then
	if (Bathroom_Fan.state == ON) {
		sendCommand(Bathroom_Fan, OFF)
	}
	if (StorageRoom_Fan.state == ON) {
		sendCommand(StorageRoom_Fan, OFF)
	}
	if (Toilet_Fan.state == ON) {
		sendCommand(Toilet_Fan, OFF)
	}
end

rule shutdownBathroomHeaterTowel
when
	Item Bathroom_Heater received update ON
then
	valueHeaterTowel = Bathroom_Towel_Heater_Timer.state as Number
	timerBathroomHeater = createTimer(now.plusMinutes(valueHeaterTowel.intValue)) [|
		sendCommand(Bathroom_Heater, OFF)
		timerBathroomHeater = null
	]
	var count = valueHeaterTowel
	while(count >= 0) {
		Countdown_Bathroom_Towel_Heater.postUpdate(count)
		count = count - 1
		Thread::sleep(60000)
	}
end

rule shutdownToiletFan
when
        Item Toilet_Fan received update ON
then
	valueFanToilet = Toilet_Fan_Timer.state as Number
        timerToiletFan = createTimer(now.plusMinutes(valueFanToilet.intValue)) [|
                sendCommand(Toilet_Fan, OFF)
                timerStorageroomLight = null
        ]
	var count = valueFanToilet
	while(count >= 0) {
		Countdown_Toilet_Fan.postUpdate(count)
		count = count - 1
		Thread::sleep(60000)
	}
end

rule shutdownBalconyOfficeLight
when
	Item BalconyOffice_Light received update ON
then
	valueLightBalconyoffice = Balconyoffice_Light_Timer.state as Number
	timerBalconyOfficeLight = createTimer(now.plusMinutes(valueLightBalconyoffice.intValue)) [|
		sendCommand(BalconyOffice_Light, OFF)
		timerBalconyOfficeLight = null
	]
	var count = valueLightBalconyoffice
	while(count >= 0) {
		Countdown_Balconyoffice_Light.postUpdate(count)
		count = count - 1
		Thread::sleep(60000)
	}
end

rule shutdownBalconyMasterbedroomLight
when
        Item BalconyMasterbedroom_Light received update ON
then
	valueLightBalconymasterbedroom = Balconymasterbedroom_Light_Timer.state as Number
        timerBalconyMasterbedroomLight = createTimer(now.plusMinutes(valueLightBalconymasterbedroom.intValue)) [|
                sendCommand(BalconyMasterbedroom_Light, OFF)
                timerBalconyMasterbedroomLight = null
        ]
	var count = valueLightBalconymasterbedroom
        while(count >= 0) {
                Countdown_Balconymasterbedroom_Light.postUpdate(count)
                count = count - 1
                Thread::sleep(60000)
        }
end

rule shutdownStorageroomLight
when
	Item StorageRoom_Light received update ON
then
	valueLightStorageroom = Storageroom_Light_Timer.state as Number
	timerStorageroomLight = createTimer(now.plusMinutes(valueLightStorageroom.intValue)) [|
        	sendCommand(StorageRoom_Light, OFF)
                timerStorageroomLight = null
        ]
	var count = valueLightStorageroom
		while(count >= 0) {
			Countdown_Storageroom_Light.postUpdate(count)
			count = count - 1
			Thread::sleep(60000)
	}
end

rule shutdownHallwayLight
when
        Item Hallway_Light received update ON
then
	valueLightHallway = Hallway_Light_Timer.state as Number
        timerHallwayLight = createTimer(now.plusMinutes(valueLightHallway.intValue)) [|
	        sendCommand(Hallway_Light, OFF)
                timerHallwayLight = null
        ]
	var count = valueLightHallway
	while(count >= 0) {
		Countdown_Hallway_Light.postUpdate(count)
		count = count - 1
		Thread::sleep(60000)
	}
end

rule shutdownStairwellLight
when
	Item Stairwell_Light received update ON
then
	valueLightStairwell = Stairwell_Light_Timer.state as Number
	timerStairwellLight = createTimer(now.plusMinutes(valueLightStairwell.intValue)) [|
		sendCommand(Stairwell_Light, OFF)
		timerStairwellLight = null
	]
	var count = valueLightStairwell
	while(count >= 0) {
		Countdown_Stairwell_Light.postUpdate(count)
		count = count - 1
		Thread::sleep(60000)
	}
end

rule startupInit
when
	System started
then
	RoofEnabled = now
	RoofDisabled = now
	TimeEnabled = 0
	Energy = TimeEnabled/1000 * Power
	Energy = Energy/3600
	EnergyTotal.postUpdate(Energy)
end

//rule "Track roofCable On Off"
//when
//	Item Kitchen_Light changed
//then
//	if (Kitchen_Light == ON) {
//		Roofenabled = now
//	} else {
//		RoofDisabled = now
//		TimeEnabled = TimeEnabled + RoofDisabled.millis - RoofEnabled.millis
//		Energy = TimeEnabled/1000 * Power
//		Energy = Energy/3600
//		EnergyTotal.postUpdate(Energy)
//	}
//end
