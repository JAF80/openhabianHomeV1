import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DateTimeType

var Timer timerKitchen = null
var Timer timerBathroom = null
var Timer timerStorageroom = null
var Timer timerStorageroomLight = null
var Timer timerStairwellLight = null
var Timer timerToiletFan = null

var DateTime RoofEnabled
var DateTime RoofDisabled
var long TimeEnabled
var float Energy
var float Power = 10

rule SetDay
when
	System started or Time is midnight
then
	Date.postUpdate(new DateTimeType())
end	

rule controlHumidityInBathroom
when
        Item Bathroom_Humidity changed
then
        if ((now.getHourOfDay() > 08) && (now.getHourOfDay() < 22)) {
                if ((Bathroom_Humidity.state >= 80) && (Bathroom_Fan == OFF)) {
                        sendCommand(Bathroom_Fan, ON)
                }
        } else {
		if (Bathroom_Humidity.state <= 75) {
			timerBathroom = createTimer(now.plusSeconds(1800)) [|
                                sendCommand(Bathroom_Fan, OFF)
                                //timerBathroom = null
                        ]
		}
        }
end

rule controlTemperatureInStorageRoom
when
        Item StorageRoom_Temperature changed
then
        if ((now.getHourOfDay() > 08) && (now.getHourOfDay() < 22)) {
                if ((StorageRoom_Temperature.state >= 40) && (StorageRoom_Fan == OFF)) {
                        sendCommand(StorageRoom_Fan, ON)
                }
        } else {
		if (StorageRoom_Temperature.state < 30) {
			timerStorageroom = createTimer(now.plusSeconds(1800)) [|
                                sendCommand(StorageRoom_Fan, OFF)
                                //timerStorageroom = null
                        ]
                }
        }
end

rule shutdownToiletFan
when
        Item Toilet_Fan received update ON
then
        timerToiletFan = createTimer(now.plusSeconds(300)) [|
                sendCommand(Toilet_Fan, OFF)
                //timerStorageroomLight = null
        ]
end

rule shutdownStorageroomLight
when
	Item StorageRoom_Light received update ON
then
	timerStorageroomLight = createTimer(now.plusSeconds(600)) [|
        	sendCommand(StorageRoom_Light, OFF)
                //timerStorageroomLight = null
        ]
end

rule shutdownStairwellLight
when
        Item Stairwell_Light received update ON
then
        timerStairwellLight = createTimer(now.plusSeconds(300)) [|
                sendCommand(Stairwell_Light, OFF)
                //timerStorageroomLight = null
        ]
end

rule "Startup Init"
when
	System started
then
	RoofEnabled = now
	RoofDisabled = now
	TimeEnabled = 0
	Energy = TimeEnabled/1000 * Power
	Energy = Energy/3600
	EnergyTotal.postUpdate(Energy)
end

rule "Track roofCable On Off"
when
	Item Kitchen_Light changed
then
	if (Kitchen_Light == ON) {
		Roofenabled = now
	} else {
		RoofDisabled = now
		TimeEnabled = TimeEnabled + RoofDisabled.millis - RoofEnabled.millis
		Energy = TimeEnabled/1000 * Power
		Energy = Energy/3600
		EnergyTotal.postUpdate(Energy)
	}
end
